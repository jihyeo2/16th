[{"content":"I‚Äôve decided to go for the AWS Certified Cloud Practitioner and Security+. Hoping to wrap up AWS CCP this week and then move on to Security+!\nOh, and a bit off topic but a re_csgo post is coming soon!\n","permalink":"https://jihyeo2.github.io/16th/posts/certs/","summary":"\u003cp\u003eI‚Äôve decided to go for the AWS Certified Cloud Practitioner and Security+. Hoping to wrap up AWS CCP this week and then move on to Security+!\u003c/p\u003e\n\u003cp\u003eOh, and a bit off topic but a re_csgo post is coming soon!\u003c/p\u003e","title":"AWS CCP \u0026 Security+"},{"content":"Teleport to Enemy \u0026amp; God Mode There are actually two more features I tried adding (at least as POCs) to my first CSGO cheat, Jerry\u0026rsquo;s fart stinks\u0026ndash;Teleport to Enemy and God Mode.\nFirst approach I just tried overwriting the values directly at the memory addresses. Unsurprisingly, it failed because of server-side desync.\nSecond approach I figured, since functions like EndScene() tun every frame and keep things synced, maybe I could call a similar function every cycle after tweaking it with a trampoline hook.\nAfter some digging, I found CL_Move for teleporting (ty chatgpt) and onTakeDamage for God Mode (ty myself).\nCL_Move CL_Move forces the engine to process all user commands and sync the player state with the server. My idea was:\nset my position near the enemy zero out velocity on the x and y directions add a slight jump in z to avoid getting stuck, then call CL_Move (found by pattern scanning) to sync my new location with the server. Short story short, it didn\u0026rsquo;t work. I thought maybe the update speed or frequency was off, so I tried tying it to EndScene() to send updates every frame, but that didn\u0026rsquo;t help much either. Looks like I need to spend more time undrestanding CL_Move and the rendering pipeline, especially tickshifting and whatnot. Or maybe I\u0026rsquo;ll just look for a better function if this one doesn\u0026rsquo;t pan out.\nOnTakeDamage OnTakeDamage, you guessed it, is called whenever an entity takes damage. For God Mode in CS:GO (which gives you infinite health\u0026ndash;side note: in CS2, they removed God Mode and added Buddha Mode, where your health just won\u0026rsquo;t drop below 1 HP), I thought looking for a damage-related function would be a good start.\nI poked around the source code (static analysis) and set some breakpoints (dynamic analysis) on functions triggered by player damage. Didn\u0026rsquo;t find much useful from breakpoints, but from the source code. I found OnTakeDamage inside the CBaseEntity and CBasePlayer classes.\nCBasePlayer::OnTakeDamage CBaseEntity::OnTakeDamage As you can see, after several checks in CBasePlayer::OnTakeDamage such as flags for God mode, armor, etc, the actual health reduction happens in CBaseEntity::OnTakeDamage. I thought hooking that function after figuring out its address through pattern scanning would work, but turns out it\u0026rsquo;s never called when anyone takes damage\u0026ndash;not me, not other players. So I still need to find the real function that\u0026rsquo;s triggered on damage. Too bad this wasn\u0026rsquo;t the one.\nThen I looked at the clock and thought, well, I‚Äôll get back to this later.\n(Added) Skin Changer Found it from another csgo internal hack and thought it sounds interesting\u0026hellip;(TMI: Mannnn they have such a better looking UI than mine lol and so much more toggles/options you can modify.)\n","permalink":"https://jihyeo2.github.io/16th/posts/improvements/","summary":"\u003ch2 id=\"teleport-to-enemy--god-mode\"\u003eTeleport to Enemy \u0026amp; God Mode\u003c/h2\u003e\n\u003cp\u003eThere are actually two more features I tried adding (at least as POCs) to my first CSGO cheat, \u003cem\u003eJerry\u0026rsquo;s fart stinks\u003c/em\u003e\u0026ndash;Teleport to Enemy and God Mode.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"first-approach\"\u003eFirst approach\u003c/h2\u003e\n\u003cp\u003eI just tried overwriting the values directly at the memory addresses. Unsurprisingly, it failed because of server-side desync.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"second-approach\"\u003eSecond approach\u003c/h2\u003e\n\u003cp\u003eI figured, since functions like EndScene() tun every frame and keep things synced, maybe I could call a similar function every cycle after tweaking it with a trampoline hook.\u003c/p\u003e","title":"Upcoming (someday:D) Multicheat Features List"},{"content":"Chris Su - https://mitadmissions.org/blogs/author/chris/\n","permalink":"https://jihyeo2.github.io/16th/posts/favblogger/","summary":"\u003cp\u003eChris Su - \u003ca href=\"https://mitadmissions.org/blogs/author/chris/\"\u003ehttps://mitadmissions.org/blogs/author/chris/\u003c/a\u003e\u003c/p\u003e","title":"The first blogger that made me want to blog"},{"content":" I\u0026rsquo;ll be going over my first CSGO multicheat. At the time of writing, I\u0026rsquo;m not even sure what I\u0026rsquo;ll end up talking about here, oops. TLDR Author: Julie Oh\nProduct: CSGO multicheat\nProduct Name: Jerry\u0026rsquo;s fart stinks\nFeatures: Features\nThis probably reads more like a product label than a TLDR. Eh whatever, my super genius readers will still get it.\nGithub Repo CSGO-multihack\nA bit of background I\u0026rsquo;ve always enjoyed messing around CSGO and other FPS games, writing mini cheats like flyhack, godmode, aimbot\u0026ndash;you name it. One day, I figured it was time to lock in and build a full-on multicheat. (If you are wondering what made me, feel free to DM me\u0026ndash;especially dear recruiters:D) Anyways, this is the final product. Not \u0026ldquo;final\u0026rdquo; as in the last cheat I\u0026rsquo;ll ever write, but the polished version of my first full CSGO multicheat release.\nJerry\u0026rsquo;s fart stinks Umm..just a quick note. It is a top secret who Jerry is (I signed the NDA) or whether his fart actually stinks\u0026ndash;but you know, it\u0026rsquo;s the content that matters, right? (wink wink) Pretty sure it was around 3am when I came up with the name. a\nImportant Notice I didn\u0026rsquo;t do any work around bypassing anticheat, so this only works on private servers for CSGO legacy version. But really, all cheats should be used on private servers to respect other players and prevent yourself from getting banned. Remember, there are always this one group of people you can troll\u0026ndash;your friends. Just kidnapconvince them to join your private server. That\u0026rsquo;s basically how I got my cheat playtested.\nFeatures ‚öîÔ∏è Combat Assist\nüß† Aimbot [Mouse Side Button - Front] ‚Äì Automatically locks aim onto enemies for precise targeting\nüî´ Triggerbot [Mouse Side Button - Back] ‚Äì Automatically fires when an enemy enters your crosshair\nüéØ Recoil Control [F1] ‚Äì Removes weapon recoil for steady aim\nüß± ESP (Extra Sensory Perception) Features\nüó∫Ô∏è Radar Hack [F2] ‚Äì Displays enemy positions on the in-game radar\n‚ú® Glow Outline [F3] ‚Äì Adds glowing outlines:\n- üîµ Allies outlined in blue\n- üü¢ Enemies outlined in green\n- ü©∏ Health-Based Model Color ‚Äì Gradually tints entity textures red as their health drops\nüë• Show Teammates [F4] ‚Äì Includes allies in all ESP visualizations\nüìç Snaplines [F5] ‚Äì Draws a line from your position to each visible entity\nüü¶ 2D Box ESP [F6] ‚Äì Draws a 2D box around each visible entity\nüìä Status Bars [F7] ‚Äì Displays health and armor bars next to entities\nüßæ Status Text [F8] ‚Äì Shows numeric health and armor values\nüßä 3D Box ESP [F9] ‚Äì Renders a 3D bounding box around entities\nüß≠ Velocity Indicator [F11] ‚Äì Draws a line showing the entity\u0026rsquo;s movement direction\nüëÅÔ∏è View Angle Indicator [Home] ‚Äì Draws a line showing where the entity is looking\n‚ûï Visual Assist\nüéØ Recoil Crosshair [Delete] ‚Äì Adds a static crosshair showing where bullets would land without recoil\nInstallation Guide Temporarily disable your antivirus (yep, not ideal\u0026hellip;no stealth yet) Download the latest release (csgo_multihack_01.dll and DLLInjector_csgo.multihack.exe) from the repo Launch CSGO Run the executable ‚ö†Ô∏è Just a heads-up: I just realized most browsers will flag the executable as a virus when you try to download it. So you‚Äôll probably need to disable your browser‚Äôs antivirus as well temporarily‚Äîat least until Julie Oh (hope it\u0026rsquo;s not me) figures out a clever workaround. haha\u0026hellip;haha\u0026hellip;ha\u0026hellip;tears\nDouble-check you see csgo_multihack_01.dll in the same folder the executable DLLInjector_csgo.multihack.exe is saved. Also, make sure CSGO is already running before you launch the cheat. It\u0026rsquo;s an internal cheat, so it runs via DLL injection. Hit run, and bam\u0026ndash;you are invincible. Almost\u0026hellip;if you end up still losing to your friends, you can be my buddy. It\u0026rsquo;s hard to suck controls that much, but some people just do. Like me:D\nFor devs (or anyone curious) Honestly, I have no idea how to explain this entire cheat in one go. So instead, I wrote separate posts for a few of the parts I found interesting to talk about. They are pretty long, so I didn\u0026rsquo;t want to cram them all in this one post:\nAimbot - Not about calcAngle\u0026hellip;then what? Hint: Ray ESP - I made my 3D box spin\u0026hellip;pretty cool huh. And I can\u0026rsquo;t make it stop, I gotta fix my code) GlowObjectManager - Took me 5 days to figure it out. If you can make it faster, I will\u0026hellip; I made those titles, thinking these were my videos I\u0026rsquo;m uploading on youtube. Glad I\u0026rsquo;m not a youtuber (yet??).\n(If you\u0026rsquo;ve got questions, just shoot me a DM\u0026ndash;even at 4am. My discord is always muted, so nw. I might not reply right away, but I won\u0026rsquo;t get woken up either.)\nFuture Improvements/Goals Loooots to improve like:\nFix Triggerbot functionality ‚Äî currently doesn\u0026rsquo;t work/very unreliable Improve Aimbot with recoil compensation Ensure Glow effect (excluding outline) clears properly when disabled Resolve conflicts between multiple Combat Assists (Aimbot, Triggerbot, Recoil Control) Add per-weapon customization for recoil control Allow users to configure keybinds Also, I\u0026rsquo;ve still got a few ideas like Teleport, Godmode, and Speed Hack. I talked a bit about them in Upcoming (no guarantee:D) Multicheat Features List post.\nOh, and I want to learn more about manual mapping so that I don\u0026rsquo;t have to use the LoadLibrary function for better stealth.\nConclusion Writing this cheat and this post took forever. It was a long grind, but totally worth it. It feels great putting everything down into a human-readable form, and even better knowing it might help someone else who\u0026rsquo;s into reverse engineering or game hacking.\n","permalink":"https://jihyeo2.github.io/16th/posts/jerrysfartstinks/","summary":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eI\u0026rsquo;ll be going over my first CSGO multicheat. At the time of writing, I\u0026rsquo;m not even sure what I\u0026rsquo;ll end up talking about here, oops.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\n\n\u003cp\u003e\u003cdetails \u003e\n  \u003csummary markdown=\"span\"\u003e\u003cstrong\u003eTLDR\u003c/strong\u003e\u003c/summary\u003e\n  \u003cp\u003eAuthor: Julie Oh\u003cbr\u003e\nProduct: CSGO multicheat\u003cbr\u003e\nProduct Name: Jerry\u0026rsquo;s fart stinks\u003cbr\u003e\nFeatures: \u003ca href=\"/16th/posts/jerrysfartstinks/#features\"\u003eFeatures\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis probably reads more like a product label than a TLDR. Eh whatever, my super genius readers will still get it.\u003c/p\u003e\n\n\u003c/details\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"github-repo\"\u003eGithub Repo\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/jihyeo2/CSGO-multihack\"\u003eCSGO-multihack\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"a-bit-of-background\"\u003eA bit of background\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;ve always enjoyed messing around CSGO and other FPS games, writing mini cheats like flyhack, godmode, aimbot\u0026ndash;you name it. One day, I figured it was time to lock in and build a full-on multicheat. (If you are wondering what made me, feel free to DM me\u0026ndash;especially dear recruiters:D) Anyways, this is the final product. Not \u0026ldquo;final\u0026rdquo; as in the last cheat I\u0026rsquo;ll ever write, but the polished version of my first full CSGO multicheat release.\u003c/p\u003e","title":"Jerry's fart stinks"},{"content":"Today, I watched a movie called No Reservations. It is a film I first saw back in middle school with my dad in Korea. Back then, movies were one of the few ways I could catch a glimpse of what life looked like on the other side of the world\u0026ndash;especially in America. Little by little, watching those stories unfold on screen, I began to dream about studying and living in the U.S. And by God\u0026rsquo;s grace, and with the unwavering support of my devoted parents, that dream became my reality.\nLooking back now, I realize it\u0026rsquo;s already been eight years since I first came to the States. Just a few days ago, I was driving down streets that looked just like the ones in those old movies, cooking in a kitchen that reminded me of scenes from so many American TV shows. And again, I felt it\u0026ndash;I\u0026rsquo;m living one of my dreams.\nAnd I am deeply thankful for that.\nBut today\u0026ndash;ironically\u0026ndash;I\u0026rsquo;m living in that dream knowing it could be coming to an end soon. I was laid off last Friday due to company downsizing, and because of an EAD card delivery issue I had, I\u0026rsquo;m now left with just 58 days to find a job and stay. Less than two months. Given how tough the job market has been and how familiar this kind of uncertainty is\u0026ndash;just like last year when I was job hunting right after graduation\u0026ndash;it\u0026rsquo;s no surprise that worry was the first thing that flooded my mind. And it hasn\u0026rsquo;t left yet.\nHowever, I must remind myself that this isn\u0026rsquo;t the end of the road. No matter how it turns out to be, one thing is true\u0026ndash;I got to live my dream. And if I do end up having to leave the U.S., maybe that\u0026rsquo;s part of a greater plan. I didn\u0026rsquo;t come here on my own. God brought me here, and he will lead me wherever I\u0026rsquo;m meant to go next.\nSo what now? I give it everything. All in! Try my very best to find a job\u0026ndash;full-time or internship\u0026ndash;over these next two months. And when the times comes, I\u0026rsquo;ll accept whatever comes.\nWith God, I got this.\nUpdate: umm\u0026hellip;it hasn\u0026rsquo;t gone quite the way I promised to myself in this post, but you know, it\u0026rsquo;s getting there hehe.\n","permalink":"https://jihyeo2.github.io/16th/posts/rubicon/","summary":"\u003cp\u003eToday, I watched a movie called \u003cem\u003eNo Reservations\u003c/em\u003e. It is a film I first saw back in middle school with my dad in Korea. Back then, movies were one of the few ways I could catch a glimpse of what life looked like on the other side of the world\u0026ndash;especially in America. Little by little, watching those stories unfold on screen, I began to dream about studying and living in the U.S. And by God\u0026rsquo;s grace, and with the unwavering support of my devoted parents, that dream became my reality.\u003c/p\u003e","title":"I've Crossed the Rubicon"},{"content":" This post is more about how I injected my ESP into the game screen\u0026ndash;not how I actually drew stuff. For drawing, I just used existing D3D9 functions. Here\u0026rsquo;s my acrostic for y\u0026rsquo;all E. nemies glowing like neon signs, can‚Äôt miss \u0026rsquo;em now\nS. eeing them through walls feels almost unfair\nP. erfect Visibility, whether they like it or not\nAhahaha, how was it? Pretty solid, no? How did you like chatgpt\u0026rsquo;smy fabulous ESP acrostic?\nESP If you are new to this and don\u0026rsquo;t know what ESP is\u0026hellip;\nESP stands for Extra Sensory Perception. In the context of fps games, it\u0026rsquo;s just a fancy name for visual cheats that reveal things you wouldn\u0026rsquo;t normally\u0026ndash;like player boxes, health, armor, names, glow outlines, you name it.\nCredits Before diving into how I wrote the esp, big shoutout to GuidedHacking\u0026rsquo;s OpenGL ESP Tutorial and DirectX ESP Tutorial. The OpenGL guide targets an older fps game called AssaultCube that uses with an OpenGL-based engine, while the DirectX guide is for CS:GO, which by default uses DirectX 9 for rendering.\nHow to write an ESP The core idea is to find a function in the rendering pipeline you can hook into. Then, draw the we can draw the ESP and pass control back to the original function. I followed the same general flow in my ESP.\nFinding what to hook\u0026ndash;SwapBuffers or EndScene? SwapBuffers: Swaps front/back buffers every frame; prevents flickering and tearing. EndScene: Called once everything‚Äôs drawn for the next frame. I originally thought both were interchanaeable, but it turns out that SwapBuffers is for OpenGL and EndScene for DirectX. So just pick whichever your target game uses, no need to over think it.\nFinding where to hook Sure, you can pattern scan for EndScene, but thanks to GuidedHacking\u0026rsquo;s DirectX ESP Tutorial, I was able to take a different approach on it. Basically, I made a dummy D3D9 device, copy its vtable, and used it to find EndScene() from index 42.\nHere\u0026rsquo;s how I did it.\nIn my GetD3D9Device function (Hacks/ESP/dx.cpp), I create a dummy D3D9 device.\nHRESULT dummyDevCreated = pD3D-\u0026gt;CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, d3dpp.hDeviceWindow, D3DCREATE_SOFTWARE_VERTEXPROCESSING, \u0026amp;d3dpp, \u0026amp;pDummyDevice ); Once it\u0026rsquo;s successfully created, I copy its vtable.\nmemcpy(pTable, *(void***)(pDummyDevice), size); Then, in dllmain.cpp inside the main HackThread, I grab and hook EndScene()\nif (GetD3D9Device(d3d9Device, sizeof(d3d9Device))) { // d3d9Device[42]: EndScene() memcpy(EndSceneBytes, (char*)d3d9Device[42], 7); oEndScene = (tEndScene)TrampHook((BYTE*)d3d9Device[42], (BYTE*)hkEndScene, 7); } Pretty simple once you see it laid out, right?\nQuick Setup Reminder Oh, I almost forgot. To use the DirectX 9 library in your project, you need to include the DirectX 9 SDK in your Visual Studio project. Here\u0026rsquo;s how to set it up:\nDownload and install the corresponding SDK (Direct3d9 SDK June 2010 in my case) In Visual Studio, go to Project \u0026gt; Properties \u0026gt; VC++ Directories, and add the SDK\u0026rsquo;s include and lib folders to the appropriate fields Link the required libraries by either adding them in your project settings (Project Properties \u0026gt; Linker \u0026gt; Input \u0026gt; Additional Dependencies) or adding the following lines to your main header file. #include \u0026lt;d3d9.h\u0026gt; #include \u0026lt;d3dx9.h\u0026gt; #pragma comment(lib, \u0026#34;d3d9.lib\u0026#34;) #pragma comment(lib, \u0026#34;d3dx9.lib\u0026#34;) #pragma comment basically tells the linker to automatically link against a specific library. In my case, it tells the compiler to include d3d9.lib and d3dx9.lib when linking.\nWrapping Up That\u0026rsquo;s about it!\nI really liked the idea of creating a dummy device to find target functions\u0026ndash;it felt way smarter than just relying on pattern scanning. I guess it wasn‚Äôt about getting the exact answer, but about discovering different approaches.\n","permalink":"https://jihyeo2.github.io/16th/posts/esp/","summary":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThis post is more about how I injected my ESP into the game screen\u0026ndash;not how I actually drew stuff. For drawing, I just used existing D3D9 functions.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\n\n\u003cp\u003e\u003cdetails \u003e\n  \u003csummary markdown=\"span\"\u003e\u003cstrong\u003eHere\u0026rsquo;s my acrostic for y\u0026rsquo;all\u003c/strong\u003e\u003c/summary\u003e\n  \u003cp\u003eE. nemies glowing like neon signs, can‚Äôt miss \u0026rsquo;em now\u003cbr\u003e\nS. eeing them through walls feels almost unfair\u003cbr\u003e\nP. erfect Visibility, whether they like it or not\u003c/p\u003e\n\u003cp\u003eAhahaha, how was it? Pretty solid, no? How did you like \u003cdel\u003echatgpt\u0026rsquo;s\u003c/del\u003emy fabulous ESP acrostic?\u003c/p\u003e","title":"xXESPXx"},{"content":" This post is more about how I used the TraceRay function for my aimbot, not so much about how I calculated angles. TLDR I used TraceRay from IEngineTrace to check if enemies were visible before activating my aimbot. In detail, I found the interface via CreateInterface(\u0026quot;EngineTraceClient004\u0026quot;), set up a ray from my eye to their head, and checked the trace result. Aimbot Simple, it aims for you!\nFor mine, I just grab the closest enemy and snap my view angle to their head.\nvoid RunAimbot() { Player* closestEnemy = GetClosestEnemy(); if (closestEnemy) hack-\u0026gt;localPlayer-\u0026gt;AimAt(closestEnemy-\u0026gt;GetBonePos(8)); // 8: head } Trigonemtry (briefly) Just in case you are curious\u0026ndash;nothing fancy, just high school trig.\nVector3 deltaVec = { target.x - myPos-\u0026gt;x, target.y - myPos-\u0026gt;y, target.z - myPos-\u0026gt;z }; float deltaVecLength = sqrt(deltaVec.x * deltaVec.x + deltaVec.y * deltaVec.y + deltaVec.z * deltaVec.z); float pitch = -asin(deltaVec.z / deltaVecLength) * (180 / PI); float yaw = atan2(deltaVec.y, deltaVec.x) * (180 / PI); I used asin for pitch and atan2 for yaw based on the traingles formed between me and the enemy. Initially, my pitch was off (it was pointing the wrong way), so I reverted it after trial and error.\nAfter calculating the view angles, I smoothed them before applying to avoid snapping.\nTraceRay To check if there\u0026rsquo;s a clear line of sight to the enemy, I used TraceRay to fire a ray from my eye position to the enemy\u0026rsquo;s head.\nIf you take a peek at Valve\u0026rsquo;s IEngineTrace.h, TraceRay is part of the IEngineTrace abstract class.\n//----------------------------------------------------------------------------- // Interface the engine exposes to the game DLL //----------------------------------------------------------------------------- #define INTERFACEVERSION_ENGINETRACE_SERVER\t\u0026#34;EngineTraceServer003\u0026#34; #define INTERFACEVERSION_ENGINETRACE_CLIENT\t\u0026#34;EngineTraceClient003\u0026#34; abstract_class IEngineTrace { public: // Returns the contents mask + entity at a particular world-space position virtual int\tGetPointContents( const Vector \u0026amp;vecAbsPosition, IHandleEntity** ppEntity = NULL ) = 0; // Get the point contents, but only test the specific entity. This works // on static props and brush models. // // If the entity isn\u0026#39;t a static prop or a brush model, it returns CONTENTS_EMPTY and sets // bFailed to true if bFailed is non-null. virtual int\tGetPointContents_Collideable( ICollideable *pCollide, const Vector \u0026amp;vecAbsPosition ) = 0; // Traces a ray against a particular entity virtual void\tClipRayToEntity( const Ray_t \u0026amp;ray, unsigned int fMask, IHandleEntity *pEnt, trace_t *pTrace ) = 0; // Traces a ray against a particular entity virtual void\tClipRayToCollideable( const Ray_t \u0026amp;ray, unsigned int fMask, ICollideable *pCollide, trace_t *pTrace ) = 0; // A version that simply accepts a ray (can work as a traceline or tracehull) virtual void\tTraceRay( const Ray_t \u0026amp;ray, unsigned int fMask, ITraceFilter *pTraceFilter, trace_t *pTrace ) = 0; So no need to reimplement anything, just grab the interface and call the method! Work is already done by the game.\nSo how do we get this interface?\nCreateInterface If you open engine.dll in IDA pro and check the Exports tab, you can easily find CreateInterface.\nWith this in mind, I define a function pointer for CreateInterface, grab its address, and call it with the name \u0026ldquo;EngineTraceClient004\u0026rdquo; to get the engine trace interface I need.\ntypedef void* (__cdecl* tCreateInterface)(const char* name, int* pReturnCode); tCreateInterface CreateInterface = (tCreateInterface)GetProcAddress((HMODULE)engine, \u0026#34;CreateInterface\u0026#34;); EngineTrace = (IEngineTrace*)GetInterface(CreateInterface, \u0026#34;EngineTraceClient004\u0026#34;); You might notice Valve\u0026rsquo;s source code uses \u0026ldquo;EngineTraceClient003\u0026rdquo;. I first used it, but it didn\u0026rsquo;t work. Turned out that because the source code is from 2013, it shows you an outdated interface name as Valve continuously updates version name of the interface when they update the internal layout over time. So you should just use the latest one that works, \u0026ldquo;EngineTraceClient004\u0026rdquo; in my case.\nDrawing a TraceRay To use IEngineTrace, we first need to define a few classes and member functions used in the arguments and return value of TraceRay. I pulled these directly from the source code and organized them into Objects/Traceobjects.h.\nRay_t Once the interface was set up, everything else was simple. I just searched how to draw a traceline with IEngineTrace and followed the steps.\nCGameTrace trace; Ray_t ray; CTraceFilter tracefilter; tracefilter.pSkip = (void*)this-\u0026gt;GetEnt(); ray.Init(eyepos, targetheadpos); hack-\u0026gt;EngineTrace-\u0026gt;TraceRay(ray, MASK_SHOT | CONTENTS_GRATE, \u0026amp;tracefilter, \u0026amp;trace); Then I checked whether the ray‚Äôs fraction (i.e. how far it traveled before hitting something) was close to 1 and whether the hit entity matched my target player.\nreturn (trace.fraction \u0026gt; 0.97f \u0026amp;\u0026amp; (Ent*)player-\u0026gt;GetEnt() == (Ent*)trace.hit_entity); Finishing thoughts A couple of years ago, I remember getting stuck on the aimbot for quite a while. So, I\u0026rsquo;m honestly pretty surprised how straightforward it was this time around with all the solid guides out there now.\nCredits Hats off to GuidedHacking! Especially their traceline tutorial, super helpful for understanding how to work with TraceRay!\n","permalink":"https://jihyeo2.github.io/16th/posts/aimbot/","summary":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThis post is more about how I used the \u003ccode\u003eTraceRay\u003c/code\u003e function for my aimbot, not so much about how I calculated angles.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\n\n\u003cp\u003e\u003cdetails \u003e\n  \u003csummary markdown=\"span\"\u003e\u003cstrong\u003eTLDR\u003c/strong\u003e\u003c/summary\u003e\n  I used \u003ccode\u003eTraceRay\u003c/code\u003e from \u003ccode\u003eIEngineTrace\u003c/code\u003e to check if enemies were visible before activating my aimbot. In detail, I found the interface via \u003ccode\u003eCreateInterface(\u0026quot;EngineTraceClient004\u0026quot;)\u003c/code\u003e, set up a ray from my eye to their head, and checked the trace result.\n\u003c/details\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"aimbot\"\u003eAimbot\u003c/h2\u003e\n\u003cp\u003eSimple, it aims for you!\u003c/p\u003e\n\u003cp\u003eFor mine, I just grab the closest enemy and snap my view angle to their head.\u003c/p\u003e","title":"Aimbot was so easy to make guys"},{"content":" I\u0026rsquo;ll be talking about a part I was stuck at when I was writing a CS:GO glowhack. TLDR For a glowhack, you\u0026rsquo;ll need access to the GlowObjectManager. If you cannot find it with an offset dumper and need to locate it manually like I did, you should start by looking at functions like RenderGlowEffects or DoPostScreenSpaceEffects using the keyword \u0026ldquo;EntityGlowEffects\u0026rdquo;. By analyzing the assemly and setting breakpoints at either function, you can trace and find the address of GlowObjectManager (in my case, it was at client.dll + 0x535fcb8). GlowHack What is a GlowHack? Yep, whatever you are thinking is probably right.\nA glowhack makes entity models ‚Äúglow‚Äù through walls, typically in the form of an outline, by modifying how they are rendered in memory. It is not limited to just players\u0026ndash;it can be applied to weapons and surrounding objects too. Naturally, this gives the player a huge advantage by revealing opponents regardless of line of sight.\nPretty intuitive, right?\nSo\u0026hellip;Who Is This GlowObjectManager? In CS:GO, the GlowObjectManager is an object that maintains an array of glow objects, each linked to a specific game entity (like a player). Each glow object contains the color, alpha (transparency), and rendering options that tell the engine how to render the glow effect.\nFrom Valve\u0026rsquo;s source code, specifically from glow_outline_effect.h, I got a better understanding of its layout.\nclass CGlowObjectManager { CUtlVector\u0026lt; GlowObjectDefinition_t \u0026gt; m_GlowObjectDefinitions; int m_nFirstFreeSlot; } struct GlowObjectDefinition_t { EHANDLE m_hEntity; Vector m_vGlowColor; float m_flGlowAlpha; bool m_bRenderWhenOccluded; bool m_bRenderWhenUnoccluded; int m_nSplitScreenSlot; int m_nNextFreeSlot; }; Additionally, while reading GuidedHacking\u0026rsquo;s glowhack guide, I learned more about the GlowObjectDefinition_t structure and was able to piece together the following.\nstruct GllowObjectDefinition_t { BYTE buffer0[4]; // padding EHANDLE m_hEntity; Vector m_vGlowColor; float m_flGlowAlpha; BYTE buffer1[8]; float bloomAmount; BYTE buffer2[4]; bool m_bRenderWhenOccluded; bool m_bRenderWhenUnoccluded; bool fullBloom; BYTE buffer3[5]; int glowStyle; BYTE buffer4[4]; }; Why do I need the GlowObjectManager? To write a glowhack, I needed two key pieces of information: the addresses of the GlowObjectManager and the GlowIndex for each entity. Finding the offset of GlowIndex was very easy as the hazedumper (it\u0026rsquo;s an offset dumper I use for CS:GO) just dumped the right offset. However, it didn\u0026rsquo;t return a valid adddress for GlowObjectManager.\nSo began the hunt.\nFinding the GlowObjectManager 1. Pattern Scan with an Updated Signature My first thought was that the signature hazedumper uses for GlowObjectManager was simply outdated. I found an alternative online and tried it with my pattern scanner, but it didn‚Äôt return anything valid either.\n2. String search on IDA Pro Hoping for obvious string literals around glowObjectManager or functions that use it, I simply searched for keywords like \u0026ldquo;glowindex\u0026rdquo; and \u0026ldquo;glowobject\u0026rdquo; on IDA Pro. The result was\u0026hellip;meh. I did find things like GLOW_ALPHA, GLOW_RGB, and m_nGlowModelIndex. They looked interesting, but I didn\u0026rsquo;t find them helpful.\nThis is the moment I realized this wasn\u0026rsquo;t going to be a quick win.\n3. Google Out of ideas, I just googled how to manually find the GlowObjectManager. And omg, I was lucky enough to find this post by aixxe that explained exactly what I was looking for.\nTracking down GlowObjectManager (ft. IDA Pro, Cheat Engine, and ReClass.NET) 1. Find interesting functions (Static Analysis) Following aixxe\u0026rsquo;s steps, I searched \u0026ldquo;EntityGlowEffects\u0026rdquo; in IDA Pro and found the function called RenderGlowEffects. Checking its cross-references led me to another function called DoPostScreenSpaceEffects.\nAs mentioned in the post by aixxe, the first argument passed to RenderGlowEffects should be the glowObjectManager. But the address show in IDA (client.dll+ 0x46246f8) was not pointing to glowObjectManager.\n2. Play with the functions (Dynamic Analysis) Not a problem, I can just set breakpoints and inspect the registers on cheat engine. And I did so. I just placed breakpoints on both RenderGlowEffects and DoPostScreenSpaceEffects and watched the first argument passed into RenderGlowEffects. IDA said it should be in the esi register, so I looked into it.\nFrom the esi register, I found [client.dll + 0x534D6E8] or 0x5D6908C4, but it turned out not to be the glowObjectManager. I was quite puzzled here. I took a moment to sccan nearby memory regions for anything that looked like glowObjectManager to no avail.\nJust before calling it quits, I decided to check every register passed into RenderGlowEffects function.\nAnd there it was\u0026ndash;in the eax register for some reason: client.dll + 0x535fcb8.\nI added the glowObject layout on ReClass.NET for readibility.\n(I still don\u0026rsquo;t know why it was found from the eax register\u0026ndash;which is usually reserved for return values\u0026ndash;rather than esi as IDA suggested. If you know why, please DM me anytime. Even 4am is fine.)\nFinishing up At a glance, it might seem like I found the GlowObjectmanger in just a couple of hours\u0026ndash;but in reality, it took around five days. Not five full 24-hour days, of course, but still a good chunk of time. And when I finally tracked it down, it just felt gooooood, so good. What made it more meaningful I think was that I was able to learn how to manually identify the object, approaching it at different angles and methods, instead of relying on offset dumpers.\nWhile GuidedHacking\u0026rsquo;s glowhack guide and aixxe\u0026rsquo;s post are likely enough for anyone with some reverse engineering experience, I wanted to document my own step-by-step process in more detail\u0026ndash;mainly because there were a few extra obstacles I ran into that I thought might be helpful to share. Hopefully, it‚Äôll help other beginners like me who are learning along the way. (Who cares if I\u0026rsquo;m spoonfeeding! For babies, you have to chew the food for them sometimes.)\nLesson Learned Don‚Äôt rely too heavily on IDA Pro. Not because it‚Äôs bad\u0026ndash;it\u0026rsquo;s incredibly useful\u0026ndash;but because you‚Äôre often looking at IDA‚Äôs interpretation of the binary, not the actual source code. It‚Äôs a helpful guess, but a guess nonetheless.\nSide note / P.S. Writing this post was truly a humbling experience. I didn‚Äôt realize how difficult and time-consuming it is to clearly explain what I‚Äôve done and why. I now have a much deeper appreciation for the guides and posts that have taught me so much over the years. P.S. If you are coming from the multicheat post, here\u0026rsquo;s what you are looking for. Took me 5 days to figure it out. If you can make it faster, I will\u0026hellip;\nI will\u0026hellip;!\ndo nothing! I\u0026rsquo;m kidding\u0026hellip; Here\u0026rsquo;s your praise if it was a breeze to ya.\n(Just ignore the fact that this gif is titled sarcastic clap:D)\n","permalink":"https://jihyeo2.github.io/16th/posts/glowobjectmanager/","summary":"\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eI\u0026rsquo;ll be talking about a part I was stuck at when I was writing a CS:GO glowhack.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\n\n\u003cp\u003e\u003cdetails \u003e\n  \u003csummary markdown=\"span\"\u003e\u003cstrong\u003eTLDR\u003c/strong\u003e\u003c/summary\u003e\n  For a glowhack, you\u0026rsquo;ll need access to the \u003ccode\u003eGlowObjectManager\u003c/code\u003e. If you cannot find it with an offset dumper and need to locate it manually like I did, you should start by looking at functions like \u003cstrong\u003eRenderGlowEffects\u003c/strong\u003e or \u003cstrong\u003eDoPostScreenSpaceEffects\u003c/strong\u003e using the keyword \u003cstrong\u003e\u0026ldquo;EntityGlowEffects\u0026rdquo;\u003c/strong\u003e. By analyzing the assemly and setting breakpoints at either function, you can trace and find the address of \u003ccode\u003eGlowObjectManager\u003c/code\u003e (in my case, it was at \u003ccode\u003eclient.dll + 0x535fcb8\u003c/code\u003e).\n\u003c/details\u003e\u003c/p\u003e","title":"Finding the missing manager"},{"content":"Welp, I\u0026rsquo;m back! or maybe I\u0026rsquo;ve never been here\u0026hellip;\n","permalink":"https://jihyeo2.github.io/16th/posts/mole/","summary":"\u003cp\u003eWelp, I\u0026rsquo;m back! or maybe I\u0026rsquo;ve never been here\u0026hellip;\u003c/p\u003e","title":"You there?"},{"content":"I\u0026rsquo;m just a pedestrian 16, please ignore me.\n","permalink":"https://jihyeo2.github.io/16th/posts/test/","summary":"\u003cp\u003eI\u0026rsquo;m just a pedestrian 16, please ignore me.\u003c/p\u003e","title":"umm hello"},{"content":"My name is Julie Oh, and I\u0026rsquo;m feelin REEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\nwhat about you?\n","permalink":"https://jihyeo2.github.io/16th/about/","summary":"\u003cp\u003eMy name is Julie Oh, and I\u0026rsquo;m feelin REEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\u003c/p\u003e\n\u003cp\u003ewhat about you?\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"cat_ree\" loading=\"lazy\" src=\"https://dl.dropboxusercontent.com/scl/fi/7olalto2nxdraprryxb07/Adobe-Express-cat-ree.gif?rlkey=wn685vz3navvrtbypxm81hmab\u0026st=klq6hz76\u0026dl=0\"\u003e\u003c/p\u003e","title":"About"}]